class MyCircularDeque {
    vector<int> record;
    int capactity;
    int front;
    int rear;
    int size;
public:
    /** Initialize your data structure here. Set the size of the deque to be k. */
    MyCircularDeque(int k) {
        record.resize(k);
        capactity = k;
        size = 0;
        front = -1;
        rear = -1;
    }
    
    /** Adds an item at the front of Deque. Return true if the operation is successful. */
    bool insertFront(int value) {
        if (size != capactity) {
            if(front == -1 && rear == -1) {
                rear = 0;
                front = 0;
                record[0] = value;
            } else {
                front = (front + capactity - 1) % capactity;
                record[front] = value;
            }
            size++;
            return true;
        }
        return false;
    }
    
    /** Adds an item at the rear of Deque. Return true if the operation is successful. */
    bool insertLast(int value) {
        if (size != capactity) {
            if(front == -1 && rear == -1) {
                rear = 0;
                front = 0;
                record[0] = value;
            } else {
                rear = (rear + 1) % capactity;
                record[rear] = value;
            }
            size++;
            return true;
        }
        return false;
    }
    
    /** Deletes an item from the front of Deque. Return true if the operation is successful. */
    bool deleteFront() {
        if(size != 0) {
            front = (front + 1) % capactity;
            size--;
            return true;
        }
        return false;
    }
    
    /** Deletes an item from the rear of Deque. Return true if the operation is successful. */
    bool deleteLast() {
        if(size != 0) {
            rear = (rear + capactity - 1) % capactity;
            size--;
            return true;
        }
        return false;
    }
    
    /** Get the front item from the deque. */
    int getFront() {
        if(size != 0) {
            return record[front];
        }
        return -1;
    }
    
    /** Get the last item from the deque. */
    int getRear() {
        if(size != 0) {
            return record[rear];
        }
        return -1;
    }
    
    /** Checks whether the circular deque is empty or not. */
    bool isEmpty() {
        if(size == 0) return true;
        return false;
    }
    
    /** Checks whether the circular deque is full or not. */
    bool isFull() {
        if (size == capactity) return true;
        return false;
    }
};

/**
 * Your MyCircularDeque object will be instantiated and called as such:
 * MyCircularDeque* obj = new MyCircularDeque(k);
 * bool param_1 = obj->insertFront(value);
 * bool param_2 = obj->insertLast(value);
 * bool param_3 = obj->deleteFront();
 * bool param_4 = obj->deleteLast();
 * int param_5 = obj->getFront();
 * int param_6 = obj->getRear();
 * bool param_7 = obj->isEmpty();
 * bool param_8 = obj->isFull();
 */
